datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  USER
  ADMIN
  STAFF
  CAISSIER
}

model User {
  id          String  @id @default(uuid()) @db.Uuid
  email       String  @unique
  nom         String?
  prenom      String?
  identifiant String  @unique
  password    String
  role        Role    @default(USER)
  tel         String?

  order     Order[]
  bookmarks Bookmark[]
  product   Product[]
  achat     Achat[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Product {
  id                 String    @id @default(uuid()) @db.Uuid
  title              String?
  slug               String    @unique
  description        String?
  imageUrl           String?
  imageKey           String?   @unique
  price              Float?
  stock              Int?
  capacite           Int?
  marque             String?
  designationProduit String?   @unique
  courantDessai      Int?
  voltage            Int?
  garantie           Garantie? @default(NOGARANTIE)
  vente              Int?      @default(0)
  filterByCar        String?   @default("")
  isAchatProduct     Boolean   @default(false)
  refProduct         String    @unique

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.Uuid

  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId String   @db.Uuid

  achats  AchatProduct[]
  achatId String?        @db.Uuid

  orderItem OrderItem[]
  bookmarks Bookmark[]

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

enum Garantie {
  NOGARANTIE
  ONEYEAR
  TWOYEARS
}

model Category {
  id          String    @id @default(uuid()) @db.Uuid
  title       String
  slug        String    @unique
  description String?
  products    Product[]

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Banner {
  id       String  @id @default(uuid()) @db.Uuid
  title    String?
  slug     String  @unique
  link     String
  imageUrl String
  imageKey String

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Order {
  id     String @id @default(uuid()) @db.Uuid
  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  //personal details
  prenom String
  nom    String

  telephone     String
  //shipping details
  adresse       String
  ville         String
  codePostal    String
  notesCommande String
  email         String
  orderNumber   String @unique

  //order items
  orderItems  OrderItem[]
  //status
  orderStatus OrderStatus @default(EN_ATTENTE)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum OrderStatus {
  EN_ATTENTE
  CONFIRMER
  EN_COURS
  EXPEDIE
  LIVRE
  ANNULLE
}

model OrderItem {
  id    String  @id @default(uuid()) @db.Uuid
  title String?

  orderId   String @db.Uuid
  productId String @db.Uuid
  quantity  Int
  price     Float

  imageUrl String?

  //relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Bookmark {
  id String @id @default(uuid()) @db.Uuid

  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  productId String  @db.Uuid
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([userId, productId])
}

model Achat {
  id        String         @id @default(uuid()) @db.Uuid
  userId    String         @db.Uuid
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  products  AchatProduct[]
  refAchat  String         @unique
  createdAt DateTime       @default(now())
  updatedAt DateTime?      @updatedAt
}

model AchatProduct {
  achatId   String @db.Uuid
  productId String @db.Uuid
  qty       Int

  achat   Achat   @relation(fields: [achatId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([achatId, productId])
}
