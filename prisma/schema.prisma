generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id          String     @id @default(uuid()) @db.Uuid
  email       String     @unique
  nom         String?
  prenom      String?
  identifiant String     @unique
  password    String
  role        Role       @default(USER)
  tel         String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  achat       Achat[]
  bookmarks   Bookmark[]
  order       Order[]
  vente       Vente[]
  return      Return[]
  devis       Devis[]
}

model Product {
  id                 String          @id @default(uuid()) @db.Uuid
  title              String?
  slug               String          @unique
  description        String?
  imageUrl           String?
  imageKey           String?         @unique
  price              Float?
  stock              Int?
  capacite           Float?
  marque             String?
  designationProduit String?         @unique
  courantDessai      Float?
  voltage            Int?
  garantie           Garantie?       @default(NOGARANTIE)
  vente              Int?            @default(0)
  filterByCar        String?         @default("")
  isAchatProduct     Boolean         @default(false)
  refProduct         String          @unique
  userId             String          @db.Uuid
  categoryId         String          @db.Uuid
  achatPrice         Float?
  achatId            String?         @db.Uuid
  createdAt          DateTime        @default(now())
  updatedAt          DateTime?       @updatedAt
  achats             AchatProduct[]
  bookmarks          Bookmark[]
  orderItem          OrderItem[]
  ventes             VenteProduct[]
  returns            ReturnProduct[]
  devis              DevisProduct[]
  category           Category        @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}

model Category {
  id          String    @id @default(uuid()) @db.Uuid
  title       String
  slug        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  products    Product[]
}

model Banner {
  id        String    @id @default(uuid()) @db.Uuid
  title     String?
  slug      String    @unique
  link      String
  imageUrl  String
  imageKey  String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Order {
  id            String      @id @default(uuid()) @db.Uuid
  userId        String      @db.Uuid
  prenom        String
  nom           String
  telephone     String
  adresse       String
  ville         String
  codePostal    String
  notesCommande String
  email         String
  orderNumber   String      @unique
  orderStatus   OrderStatus @default(EN_ATTENTE)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems    OrderItem[]
}

model Vente {
  id            String      @id @default(uuid()) @db.Uuid
  userId        String?     @db.Uuid
  clientNom     String
  clientPrenom  String
  clientTel     String?
  nomDuCaissier String?
  venteRef      String      @unique
  paymentType   PaymentType

  factureCode     String?        @unique
  generateFacture Boolean        @default(false)
  venteBenifits   Float?
  ice             String?
  user            User?          @relation(fields: [userId], references: [id])
  products        VenteProduct[]
  returns         Return[]

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@index([createdAt])
}

model VenteCounter {
  year    String @id
  counter Int    @default(1)
}

model VenteProduct {
  venteId             String  @db.Uuid
  productId           String  @db.Uuid
  qty                 Int
  price               Float?
  discount            Float?
  designationProduit  String?
  productVenteBenifit Float?
  marque              String?
  refProduct          String?
  codeGarantie        String?
  commission          Float?
  product             Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  vente               Vente   @relation(fields: [venteId], references: [id], onDelete: Cascade)

  @@id([venteId, productId])
}

model OrderItem {
  id        String   @id @default(uuid()) @db.Uuid
  title     String?
  orderId   String   @db.Uuid
  productId String   @db.Uuid
  quantity  Int
  price     Float
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Bookmark {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  productId String   @db.Uuid
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

model Achat {
  id        String         @id @default(uuid()) @db.Uuid
  userId    String         @db.Uuid
  refAchat  String         @unique
  createdAt DateTime       @default(now())
  updatedAt DateTime?      @updatedAt
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  products  AchatProduct[]
}

model AchatProduct {
  achatId   String  @db.Uuid
  productId String  @db.Uuid
  qty       Int
  achat     Achat   @relation(fields: [achatId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([achatId, productId])
}

model CompanyClient {
  id          String    @id @default(uuid()) @db.Uuid
  nom         String
  prenom      String
  tel         String
  identifiant String    @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
}

model Cost {
  id            String    @id @default(uuid()) @db.Uuid
  natureDuFrais String
  date          DateTime
  montant       Float
  createdAt     DateTime  @default(now())
  updatedAt     DateTime? @updatedAt
}

model Return {
  id            String          @id @default(uuid()) @db.Uuid
  products      ReturnProduct[]
  returnRef     String          @unique
  userId        String?         @db.Uuid
  user          User?           @relation(fields: [userId], references: [id])
  returnFrom    String?
  nomDuCaissier String?

  sourceId String? @db.Uuid
  vente    Vente?  @relation(fields: [sourceId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model ReturnProduct {
  returnId  String @db.Uuid
  productId String @db.Uuid

  qty                Int
  price              Float?
  designationProduit String?
  marque             String?
  refProduct         String?
  product            Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  return             Return  @relation(fields: [returnId], references: [id], onDelete: Cascade)

  @@id([returnId, productId])
}

model Devis {
  id            String  @id @default(uuid()) @db.Uuid
  userId        String? @db.Uuid
  clientNom     String
  clientPrenom  String
  clientTel     String?
  nomDuCaissier String?
  devisRef      String  @unique

  user     User?          @relation(fields: [userId], references: [id])
  products DevisProduct[]

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@index([createdAt])
}

model DevisProduct {
  devisId            String  @db.Uuid
  productId          String  @db.Uuid
  qty                Int
  price              Float?
  designationProduit String?
  marque             String?
  refProduct         String?
  discount           Float?

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  devis   Devis   @relation(fields: [devisId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@id([devisId, productId])
}

enum Role {
  USER
  ADMIN
  STAFF
  CAISSIER
}

enum Garantie {
  NOGARANTIE
  ONEYEAR
  TWOYEARS
}

enum OrderStatus {
  EN_ATTENTE
  CONFIRMER
  EN_COURS
  EXPEDIE
  LIVRE
  ANNULLE
}

enum PaymentType {
  ESPECE
  CHECK
  VIREMENT
  ACREDIT
}
