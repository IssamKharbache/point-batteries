datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  USER
  ADMIN
  STAFF
}

model User {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  nom         String?
  prenom      String?
  email       String  @unique
  identifiant String  @unique
  password    String
  role        Role    @default(USER)
  tel         String?

  order     Order[]
  bookmarks Bookmark[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Product {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  title            String
  slug             String   @unique
  description      String?
  imageUrl         String?
  imageKey         String?  @unique
  price            Float
  stock            Int?
  capacite         Int?
  marque           String
  variationProduct String
  courantDessai    Int
  voltage          Int
  garantie         Garantie @default(NOGARANTIE)
  vente            Int?     @default(0)

  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId String   @db.ObjectId

  orderItem OrderItem[]
  bookmarks Bookmark[]

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

enum Garantie {
  NOGARANTIE
  ONEYEAR
  TWOYEARS
}

model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String    @unique
  description String?
  products    Product[]

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Banner {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  title    String?
  slug     String
  link     String
  imageUrl String
  imageKey String

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Order {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  userId    String @db.ObjectId
  user      User   @relation(fields: [userId], references: [id])
  //personal details
  firstName String
  lastName  String
  email     String

  phone         String
  //shipping details
  streetAddress String
  city          String
  country       String
  district      String
  shippingCost  Float?

  orderNumber String

  //order items
  orderItems  OrderItem[]
  //status
  orderStatus OrderStatus @default(PROCESSING) //set default as pending
  //relation

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum OrderStatus {
  PROCESSING
  SHIPPED
  DELIVERED
}

model OrderItem {
  id    String  @id @default(auto()) @map("_id") @db.ObjectId
  title String?

  orderId   String @db.ObjectId
  productId String @db.ObjectId
  quantity  Int
  price     Float

  imageUrl String?

  //relations
  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Bookmark {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([userId, productId])
}
